name: AI-CHAT RAG CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ai-chat-rag
  PYTHON_VERSION: '3.10'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_minimal.txt') }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements_minimal.txt
        pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=rag_core --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    name: Build Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image
      run: |
        docker buildx build \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          -f Dockerfile.optimized \
          -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
          -t ${{ env.DOCKER_IMAGE }}:latest \
          --load \
          .

    - name: Test Docker image
      run: |
        docker run --rm ${{ env.DOCKER_IMAGE }}:latest python -c "print('Image OK')"

    - name: Save Docker image
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > ai-chat-rag.tar.gz

    - name: Upload Docker artifact
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: ai-chat-rag.tar.gz

  performance:
    name: Performance Testing
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install test dependencies
      run: |
        pip install -r requirements_minimal.txt
        pip install psutil

    - name: Run memory optimizer test
      run: |
        python memory_optimizer.py

    - name: Run lazy loader test
      run: |
        python lazy_loader.py

    - name: Check performance metrics
      run: |
        python -c "
        from memory_optimizer import MemoryOptimizer
        m = MemoryOptimizer()
        stats = m.get_optimization_stats()
        assert stats['current_memory_gb'] < 10, 'Memory usage too high!'
        print(f'✅ Memory usage: {stats[\"current_memory_gb\"]:.2f}GB')
        "

  deploy:
    name: Deploy to Production
    needs: [test, build, performance]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Download Docker artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        gunzip -c ai-chat-rag.tar.gz | docker load

    - name: Deploy to server
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        echo "Deploying to production..."
        # SSH 배포 명령 (실제 서버 정보 필요)
        # scp ai-chat-rag.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/opt/ai-chat/
        # ssh $DEPLOY_USER@$DEPLOY_HOST "cd /opt/ai-chat && ./deploy.sh"

    - name: Notify deployment
      run: |
        echo "✅ Deployment completed successfully!"