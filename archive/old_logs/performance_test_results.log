ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 1 CUDA devices:
  Device 0: NVIDIA RTX PRO 4000 Blackwell Generation Laptop GPU, compute capability 12.0, VMM: yes
llama_model_load_from_file_impl: using device CUDA0 (NVIDIA RTX PRO 4000 Blackwell Generation Laptop GPU) - 14959 MiB free
llama_model_loader: additional 1 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 29 key-value pairs and 339 tensors from models/qwen2.5-7b-instruct-q4_k_m-00001-of-00002.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = qwen2
llama_model_loader: - kv   1:                               general.type str              = model
llama_model_loader: - kv   2:                               general.name str              = qwen2.5-7b-instruct
llama_model_loader: - kv   3:                            general.version str              = v0.1
llama_model_loader: - kv   4:                           general.finetune str              = qwen2.5-7b-instruct
llama_model_loader: - kv   5:                         general.size_label str              = 7.6B
llama_model_loader: - kv   6:                          qwen2.block_count u32              = 28
llama_model_loader: - kv   7:                       qwen2.context_length u32              = 131072
llama_model_loader: - kv   8:                     qwen2.embedding_length u32              = 3584
llama_model_loader: - kv   9:                  qwen2.feed_forward_length u32              = 18944
llama_model_loader: - kv  10:                 qwen2.attention.head_count u32              = 28
llama_model_loader: - kv  11:              qwen2.attention.head_count_kv u32              = 4
llama_model_loader: - kv  12:                       qwen2.rope.freq_base f32              = 1000000.000000
llama_model_loader: - kv  13:     qwen2.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv  14:                          general.file_type u32              = 15
llama_model_loader: - kv  15:                       tokenizer.ggml.model str              = gpt2
llama_model_loader: - kv  16:                         tokenizer.ggml.pre str              = qwen2
llama_model_loader: - kv  17:                      tokenizer.ggml.tokens arr[str,152064]  = ["!", "\"", "#", "$", "%", "&", "'", ...
llama_model_loader: - kv  18:                  tokenizer.ggml.token_type arr[i32,152064]  = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  19:                      tokenizer.ggml.merges arr[str,151387]  = ["Ġ Ġ", "ĠĠ ĠĠ", "i n", "Ġ t",...
llama_model_loader: - kv  20:                tokenizer.ggml.eos_token_id u32              = 151645
llama_model_loader: - kv  21:            tokenizer.ggml.padding_token_id u32              = 151643
llama_model_loader: - kv  22:                tokenizer.ggml.bos_token_id u32              = 151643
llama_model_loader: - kv  23:               tokenizer.ggml.add_bos_token bool             = false
llama_model_loader: - kv  24:                    tokenizer.chat_template str              = {%- if tools %}\n    {{- '<|im_start|>...
llama_model_loader: - kv  25:               general.quantization_version u32              = 2
llama_model_loader: - kv  26:                                   split.no u16              = 0
llama_model_loader: - kv  27:                                split.count u16              = 2
llama_model_loader: - kv  28:                        split.tensors.count i32              = 339
llama_model_loader: - type  f32:  141 tensors
llama_model_loader: - type q4_K:  169 tensors
llama_model_loader: - type q6_K:   29 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q4_K - Medium
print_info: file size   = 4.36 GiB (4.91 BPW) 
init_tokenizer: initializing tokenizer for type 2
load: control token: 151660 '<|fim_middle|>' is not marked as EOG
load: control token: 151659 '<|fim_prefix|>' is not marked as EOG
load: control token: 151653 '<|vision_end|>' is not marked as EOG
load: control token: 151648 '<|box_start|>' is not marked as EOG
load: control token: 151646 '<|object_ref_start|>' is not marked as EOG
load: control token: 151649 '<|box_end|>' is not marked as EOG
load: control token: 151655 '<|image_pad|>' is not marked as EOG
load: control token: 151651 '<|quad_end|>' is not marked as EOG
load: control token: 151647 '<|object_ref_end|>' is not marked as EOG
load: control token: 151652 '<|vision_start|>' is not marked as EOG
load: control token: 151654 '<|vision_pad|>' is not marked as EOG
load: control token: 151656 '<|video_pad|>' is not marked as EOG
load: control token: 151644 '<|im_start|>' is not marked as EOG
load: control token: 151661 '<|fim_suffix|>' is not marked as EOG
load: control token: 151650 '<|quad_start|>' is not marked as EOG
load: printing all EOG tokens:
load:   - 151643 ('<|endoftext|>')
load:   - 151645 ('<|im_end|>')
load:   - 151662 ('<|fim_pad|>')
load:   - 151663 ('<|repo_name|>')
load:   - 151664 ('<|file_sep|>')
load: special tokens cache size = 22
load: token to piece cache size = 0.9310 MB
print_info: arch             = qwen2
print_info: vocab_only       = 0
print_info: n_ctx_train      = 131072
print_info: n_embd           = 3584
print_info: n_layer          = 28
print_info: n_head           = 28
print_info: n_head_kv        = 4
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: is_swa_any       = 0
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 7
print_info: n_embd_k_gqa     = 512
print_info: n_embd_v_gqa     = 512
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-06
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 18944
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = -1
print_info: rope type        = 2
print_info: rope scaling     = linear
print_info: freq_base_train  = 1000000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 131072
print_info: rope_finetuned   = unknown
print_info: model type       = 7B
print_info: model params     = 7.62 B
print_info: general.name     = qwen2.5-7b-instruct
print_info: vocab type       = BPE
print_info: n_vocab          = 152064
print_info: n_merges         = 151387
print_info: BOS token        = 151643 '<|endoftext|>'
print_info: EOS token        = 151645 '<|im_end|>'
print_info: EOT token        = 151645 '<|im_end|>'
print_info: PAD token        = 151643 '<|endoftext|>'
print_info: LF token         = 198 'Ċ'
print_info: FIM PRE token    = 151659 '<|fim_prefix|>'
print_info: FIM SUF token    = 151661 '<|fim_suffix|>'
print_info: FIM MID token    = 151660 '<|fim_middle|>'
print_info: FIM PAD token    = 151662 '<|fim_pad|>'
print_info: FIM REP token    = 151663 '<|repo_name|>'
print_info: FIM SEP token    = 151664 '<|file_sep|>'
print_info: EOG token        = 151643 '<|endoftext|>'
print_info: EOG token        = 151645 '<|im_end|>'
print_info: EOG token        = 151662 '<|fim_pad|>'
print_info: EOG token        = 151663 '<|repo_name|>'
print_info: EOG token        = 151664 '<|file_sep|>'
print_info: max token length = 256
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CUDA0, is_swa = 0
load_tensors: layer   1 assigned to device CUDA0, is_swa = 0
load_tensors: layer   2 assigned to device CUDA0, is_swa = 0
load_tensors: layer   3 assigned to device CUDA0, is_swa = 0
load_tensors: layer   4 assigned to device CUDA0, is_swa = 0
load_tensors: layer   5 assigned to device CUDA0, is_swa = 0
load_tensors: layer   6 assigned to device CUDA0, is_swa = 0
load_tensors: layer   7 assigned to device CUDA0, is_swa = 0
load_tensors: layer   8 assigned to device CUDA0, is_swa = 0
load_tensors: layer   9 assigned to device CUDA0, is_swa = 0
load_tensors: layer  10 assigned to device CUDA0, is_swa = 0
load_tensors: layer  11 assigned to device CUDA0, is_swa = 0
load_tensors: layer  12 assigned to device CUDA0, is_swa = 0
load_tensors: layer  13 assigned to device CUDA0, is_swa = 0
load_tensors: layer  14 assigned to device CUDA0, is_swa = 0
load_tensors: layer  15 assigned to device CUDA0, is_swa = 0
load_tensors: layer  16 assigned to device CUDA0, is_swa = 0
load_tensors: layer  17 assigned to device CUDA0, is_swa = 0
load_tensors: layer  18 assigned to device CUDA0, is_swa = 0
load_tensors: layer  19 assigned to device CUDA0, is_swa = 0
load_tensors: layer  20 assigned to device CUDA0, is_swa = 0
load_tensors: layer  21 assigned to device CUDA0, is_swa = 0
load_tensors: layer  22 assigned to device CUDA0, is_swa = 0
load_tensors: layer  23 assigned to device CUDA0, is_swa = 0
load_tensors: layer  24 assigned to device CUDA0, is_swa = 0
load_tensors: layer  25 assigned to device CUDA0, is_swa = 0
load_tensors: layer  26 assigned to device CUDA0, is_swa = 0
load_tensors: layer  27 assigned to device CUDA0, is_swa = 0
load_tensors: layer  28 assigned to device CUDA0, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q4_K) (and 0 others) cannot be used with preferred buffer type CUDA_Host, using CPU instead
load_tensors: offloading 28 repeating layers to GPU
load_tensors: offloading output layer to GPU
load_tensors: offloaded 29/29 layers to GPU
load_tensors:        CUDA0 model buffer size =  4168.09 MiB
load_tensors:   CPU_Mapped model buffer size =   292.36 MiB
................................................................................warning: failed to mlock 312512512-byte buffer (after previously locking 0 bytes): Cannot allocate memory
Try increasing RLIMIT_MEMLOCK ('ulimit -l' as root).
.
llama_context: constructing llama_context
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 16384
llama_context: n_ctx_per_seq = 16384
llama_context: n_batch       = 512
llama_context: n_ubatch      = 512
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: kv_unified    = false
llama_context: freq_base     = 1000000.0
llama_context: freq_scale    = 1
llama_context: n_ctx_per_seq (16384) < n_ctx_train (131072) -- the full capacity of the model will not be utilized
set_abort_callback: call
llama_context:  CUDA_Host  output buffer size =     0.58 MiB
create_memory: n_ctx = 16384 (padded)
llama_kv_cache_unified: layer   0: dev = CUDA0
llama_kv_cache_unified: layer   1: dev = CUDA0
llama_kv_cache_unified: layer   2: dev = CUDA0
llama_kv_cache_unified: layer   3: dev = CUDA0
llama_kv_cache_unified: layer   4: dev = CUDA0
llama_kv_cache_unified: layer   5: dev = CUDA0
llama_kv_cache_unified: layer   6: dev = CUDA0
llama_kv_cache_unified: layer   7: dev = CUDA0
llama_kv_cache_unified: layer   8: dev = CUDA0
llama_kv_cache_unified: layer   9: dev = CUDA0
llama_kv_cache_unified: layer  10: dev = CUDA0
llama_kv_cache_unified: layer  11: dev = CUDA0
llama_kv_cache_unified: layer  12: dev = CUDA0
llama_kv_cache_unified: layer  13: dev = CUDA0
llama_kv_cache_unified: layer  14: dev = CUDA0
llama_kv_cache_unified: layer  15: dev = CUDA0
llama_kv_cache_unified: layer  16: dev = CUDA0
llama_kv_cache_unified: layer  17: dev = CUDA0
llama_kv_cache_unified: layer  18: dev = CUDA0
llama_kv_cache_unified: layer  19: dev = CUDA0
llama_kv_cache_unified: layer  20: dev = CUDA0
llama_kv_cache_unified: layer  21: dev = CUDA0
llama_kv_cache_unified: layer  22: dev = CUDA0
llama_kv_cache_unified: layer  23: dev = CUDA0
llama_kv_cache_unified: layer  24: dev = CUDA0
llama_kv_cache_unified: layer  25: dev = CUDA0
llama_kv_cache_unified: layer  26: dev = CUDA0
llama_kv_cache_unified: layer  27: dev = CUDA0
llama_kv_cache_unified:      CUDA0 KV buffer size =   896.00 MiB
llama_kv_cache_unified: size =  896.00 MiB ( 16384 cells,  28 layers,  1/1 seqs), K (f16):  448.00 MiB, V (f16):  448.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 2
llama_context: max_nodes = 2712
llama_context: worst-case: n_tokens = 512, n_seqs = 1, n_outputs = 0
graph_reserve: reserving a graph for ubatch with n_tokens =  512, n_seqs =  1, n_outputs =  512
graph_reserve: reserving a graph for ubatch with n_tokens =    1, n_seqs =  1, n_outputs =    1
graph_reserve: reserving a graph for ubatch with n_tokens =  512, n_seqs =  1, n_outputs =  512
llama_context:      CUDA0 compute buffer size =   958.01 MiB
llama_context:  CUDA_Host compute buffer size =    41.01 MiB
llama_context: graph nodes  = 1070
llama_context: graph splits = 2
CUDA : ARCHS = 500,610,700,750,800,860,890 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX_VNNI = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | LLAMAFILE = 1 | OPENMP = 1 | REPACK = 1 | 
Model metadata: {'split.count': '2', 'tokenizer.ggml.add_bos_token': 'false', 'tokenizer.ggml.bos_token_id': '151643', 'general.file_type': '15', 'qwen2.attention.layer_norm_rms_epsilon': '0.000001', 'general.architecture': 'qwen2', 'tokenizer.ggml.padding_token_id': '151643', 'qwen2.embedding_length': '3584', 'split.tensors.count': '339', 'tokenizer.ggml.pre': 'qwen2', 'general.name': 'qwen2.5-7b-instruct', 'split.no': '0', 'qwen2.block_count': '28', 'general.version': 'v0.1', 'tokenizer.ggml.eos_token_id': '151645', 'qwen2.rope.freq_base': '1000000.000000', 'general.finetune': 'qwen2.5-7b-instruct', 'general.type': 'model', 'general.size_label': '7.6B', 'qwen2.context_length': '131072', 'tokenizer.chat_template': '{%- if tools %}\n    {{- \'<|im_start|>system\\n\' }}\n    {%- if messages[0][\'role\'] == \'system\' %}\n        {{- messages[0][\'content\'] }}\n    {%- else %}\n        {{- \'You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\' }}\n    {%- endif %}\n    {{- "\\n\\n# Tools\\n\\nYou may call one or more functions to assist with the user query.\\n\\nYou are provided with function signatures within <tools></tools> XML tags:\\n<tools>" }}\n    {%- for tool in tools %}\n        {{- "\\n" }}\n        {{- tool | tojson }}\n    {%- endfor %}\n    {{- "\\n</tools>\\n\\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\\n<tool_call>\\n{{\\"name\\": <function-name>, \\"arguments\\": <args-json-object>}}\\n</tool_call><|im_end|>\\n" }}\n{%- else %}\n    {%- if messages[0][\'role\'] == \'system\' %}\n        {{- \'<|im_start|>system\\n\' + messages[0][\'content\'] + \'<|im_end|>\\n\' }}\n    {%- else %}\n        {{- \'<|im_start|>system\\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\\n\' }}\n    {%- endif %}\n{%- endif %}\n{%- for message in messages %}\n    {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}\n        {{- \'<|im_start|>\' + message.role + \'\\n\' + message.content + \'<|im_end|>\' + \'\\n\' }}\n    {%- elif message.role == "assistant" %}\n        {{- \'<|im_start|>\' + message.role }}\n        {%- if message.content %}\n            {{- \'\\n\' + message.content }}\n        {%- endif %}\n        {%- for tool_call in message.tool_calls %}\n            {%- if tool_call.function is defined %}\n                {%- set tool_call = tool_call.function %}\n            {%- endif %}\n            {{- \'\\n<tool_call>\\n{"name": "\' }}\n            {{- tool_call.name }}\n            {{- \'", "arguments": \' }}\n            {{- tool_call.arguments | tojson }}\n            {{- \'}\\n</tool_call>\' }}\n        {%- endfor %}\n        {{- \'<|im_end|>\\n\' }}\n    {%- elif message.role == "tool" %}\n        {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}\n            {{- \'<|im_start|>user\' }}\n        {%- endif %}\n        {{- \'\\n<tool_response>\\n\' }}\n        {{- message.content }}\n        {{- \'\\n</tool_response>\' }}\n        {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}\n            {{- \'<|im_end|>\\n\' }}\n        {%- endif %}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %}\n    {{- \'<|im_start|>assistant\\n\' }}\n{%- endif %}\n', 'qwen2.attention.head_count_kv': '4', 'general.quantization_version': '2', 'tokenizer.ggml.model': 'gpt2', 'qwen2.feed_forward_length': '18944', 'qwen2.attention.head_count': '28'}
Available chat formats from metadata: chat_template.default
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =    7279.04 ms /  6439 tokens (    1.13 ms per token,   884.59 tokens per second)
llama_perf_context_print:        eval time =   48803.75 ms /  1199 runs   (   40.70 ms per token,    24.57 tokens per second)
llama_perf_context_print:       total time =   59070.37 ms /  7638 tokens
llama_perf_context_print:    graphs reused =       1161
인용 없는 응답, 재시도 1/2
Llama.generate: 6433 prefix-match hit, remaining 36 prompt tokens to eval
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =      71.28 ms /    36 tokens (    1.98 ms per token,   505.09 tokens per second)
llama_perf_context_print:        eval time =   34604.59 ms /   836 runs   (   41.39 ms per token,    24.16 tokens per second)
llama_perf_context_print:       total time =   36784.37 ms /   872 tokens
llama_perf_context_print:    graphs reused =        809
인용 없는 응답, 재시도 2/2
Llama.generate: 6463 prefix-match hit, remaining 36 prompt tokens to eval
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =      85.91 ms /    36 tokens (    2.39 ms per token,   419.04 tokens per second)
llama_perf_context_print:        eval time =    9786.97 ms /   247 runs   (   39.62 ms per token,    25.24 tokens per second)
llama_perf_context_print:       total time =   10489.90 ms /   283 tokens
llama_perf_context_print:    graphs reused =        239
Llama.generate: 232 prefix-match hit, remaining 299 prompt tokens to eval
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =     205.88 ms /   299 tokens (    0.69 ms per token,  1452.28 tokens per second)
llama_perf_context_print:        eval time =    6707.22 ms /   196 runs   (   34.22 ms per token,    29.22 tokens per second)
llama_perf_context_print:       total time =    7431.28 ms /   495 tokens
llama_perf_context_print:    graphs reused =        189
Llama.generate: 232 prefix-match hit, remaining 5153 prompt tokens to eval
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =   16879.81 ms /  5153 tokens (    3.28 ms per token,   305.28 tokens per second)
llama_perf_context_print:        eval time =  130863.51 ms /  1199 runs   (  109.14 ms per token,     9.16 tokens per second)
llama_perf_context_print:       total time =  151576.74 ms /  6352 tokens
llama_perf_context_print:    graphs reused =       1161
인용 없는 응답, 재시도 1/2
Llama.generate: 5379 prefix-match hit, remaining 36 prompt tokens to eval
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =     232.50 ms /    36 tokens (    6.46 ms per token,   154.84 tokens per second)
llama_perf_context_print:        eval time =  129361.14 ms /  1199 runs   (  107.89 ms per token,     9.27 tokens per second)
llama_perf_context_print:       total time =  133258.90 ms /  1235 tokens
llama_perf_context_print:    graphs reused =       1161
인용 없는 응답, 재시도 2/2
Llama.generate: 5409 prefix-match hit, remaining 36 prompt tokens to eval
llama_perf_context_print:        load time =    7279.95 ms
llama_perf_context_print: prompt eval time =     210.50 ms /    36 tokens (    5.85 ms per token,   171.02 tokens per second)
llama_perf_context_print:        eval time =  129969.03 ms /  1199 runs   (  108.40 ms per token,     9.23 tokens per second)
llama_perf_context_print:       total time =  134034.10 ms /  1235 tokens
llama_perf_context_print:    graphs reused =       1161
텍스트 추출 실패: docs/year_2020/2020-10-15_영상취재팀 Wireless Mic 용 Pin Mic 구매.pdf - [Errno 2] No such file or directory: 'docs/year_2020/2020-10-15_영상취재팀 Wireless Mic 용 Pin Mic 구매.pdf'
텍스트 추출 실패: docs/year_2019/2019-11-18_방송 프로그램 제작용 건전지 소모품 구매의 건.pdf - [Errno 2] No such file or directory: 'docs/year_2019/2019-11-18_방송 프로그램 제작용 건전지 소모품 구매의 건.pdf'
============================================================
🚀 RAG 시스템 성능 개선 검증 테스트
============================================================

📦 시스템 로딩...
✅ 자산 데이터 로드 완료: 7,904개 장비
✅ 375개 PDF, 10개 TXT 문서 발견
💾 캐시에서 385개 문서 메타데이터 로드
✅ 시스템 로드 완료: 0.1초
  - PDF 파일: 375개
  - TXT 파일: 10개
  - 메타데이터: 385개

📊 성능 테스트 시작...
------------------------------------------------------------

테스트 1: 2020년 구매 문서 (모드: document)
🔍 장비 키워드: ['구매'], 작업 키워드: ['구매']
📄 10개 관련 문서 발견
🤖 LLM 모델 로딩 중...
🤖 LLM 모델 최초 로딩...
✅ LLM 로드 완료 (9.1초)
⏱️ 답변 생성: 119.0초 (캐시 저장됨)
  ⏱️ 응답 시간: 119.0초
  📝 응답 길이: 1,797 글자
  ⏳ 느린 응답 (>60초)

테스트 2: 중계차 장비 현황 (모드: asset)
📄 자산 파일 발견: 채널A_방송장비_자산_종합현황.txt
⏱️ 답변 생성: 7.5초 (캐시 저장됨)
  ⏱️ 응답 시간: 7.5초
  📝 응답 길이: 326 글자
  ⚡ 빠른 응답 (<30초)

테스트 3: 카메라 수리 내역 (모드: document)
🔍 장비 키워드: ['카메라'], 작업 키워드: ['수리']
📄 15개 관련 문서 발견
⏱️ 답변 생성: 430.8초 (캐시 저장됨)
  ⏱️ 응답 시간: 430.8초
  📝 응답 길이: 3,260 글자
  ⏳ 느린 응답 (>60초)

테스트 4: 광화문 장비 (모드: asset)
📄 자산 파일 발견: 채널A_방송장비_자산_종합현황.txt
⏱️ 답변 생성: 0.0초 (캐시 저장됨)
  ⏱️ 응답 시간: 0.0초
  📝 응답 길이: 46 글자
  ✅ 캐시 히트!

테스트 5: 2020년에 구매한 문서 (모드: document)
🔍 장비 키워드: ['년에', '구매한'], 작업 키워드: ['구매']
📄 5개 관련 문서 발견
⚠️ 2020-10-15_영상취재팀 Wireless Mic 용 Pin Mic 구매.pdf 처리 실패: 모든 복구 시도 실패
⚠️ 2017-01-17_상암DDMC 조명소모품 구매 신청의 건.pdf 처리 실패: 모든 복구 시도 실패
⚠️ 2019-11-18_방송 프로그램 제작용 건전지 소모품 구매의 건.pdf 처리 실패: 모든 복구 시도 실패
⚠️ 2015-06-30_MPDP 패널 구매 요청.pdf 처리 실패: 모든 복구 시도 실패
⚠️ 2016-05-18_리튬플리머 배터리 구매의 건(영상취재팀).pdf 처리 실패: 모든 복구 시도 실패
⏱️ 답변 생성: 0.0초 (캐시 저장됨)
  ⏱️ 응답 시간: 0.0초
  📝 응답 길이: 20 글자
  ✅ 캐시 히트!

============================================================
📈 성능 통계
============================================================

총 테스트: 5개
평균 응답 시간: 111.5초
캐시 히트: 2/5 (40%)

문서 모드 평균: 183.3초
자산 모드 평균: 3.8초

캐시 통계:
Traceback (most recent call last):
  File "/home/wnstn4647/AI-CHAT/performance_validation_test.py", line 137, in <module>
    results = test_performance()
  File "/home/wnstn4647/AI-CHAT/performance_validation_test.py", line 96, in test_performance
    print(f"  - 캐시 크기: {cache_stats['size']}개")
KeyError: 'size'
