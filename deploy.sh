#!/bin/bash

#
# AI-CHAT RAG System - ÏûêÎèô Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
# ÏµúÍ≥†Ïùò Í∞úÎ∞úÏûêÍ∞Ä ÏÑ§Í≥ÑÌïú ÏõêÌÅ¥Î¶≠ Î∞∞Ìè¨ ÏãúÏä§ÌÖú
#

set -e  # Ïò§Î•ò Ïãú Ï§ëÎã®
set -o pipefail  # ÌååÏù¥ÌîÑÎùºÏù∏ Ïò§Î•ò Í∞êÏßÄ

# ÏÉâÏÉÅ ÏΩîÎìú
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Î∞∞Ìè¨ ÌôòÍ≤Ω
ENVIRONMENT=${1:-local}
VERSION=${2:-latest}

# Î°úÍ∑∏ Ìï®Ïàò
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Ìó§Îçî Ï∂úÎ†•
print_header() {
    echo ""
    echo -e "${MAGENTA}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${MAGENTA}‚ïë      AI-CHAT RAG System Auto Deployment     ‚ïë${NC}"
    echo -e "${MAGENTA}‚ïë         ÏµúÍ≥†Ïùò Í∞úÎ∞úÏûê Claude ÏûëÌíà           ‚ïë${NC}"
    echo -e "${MAGENTA}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

# ÏãúÏä§ÌÖú Ï≤¥ÌÅ¨
check_requirements() {
    log_info "ÏãúÏä§ÌÖú ÏöîÍµ¨ÏÇ¨Ìï≠ ÌôïÏù∏ Ï§ë..."

    # Docker Ï≤¥ÌÅ¨
    if ! command -v docker &> /dev/null; then
        log_error "DockerÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
        exit 1
    fi
    log_success "Docker ÌôïÏù∏ ÏôÑÎ£å"

    # Docker Compose Ï≤¥ÌÅ¨
    if ! command -v docker compose &> /dev/null && ! command -v docker-compose &> /dev/null; then
        log_error "Docker ComposeÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§"
        exit 1
    fi
    log_success "Docker Compose ÌôïÏù∏ ÏôÑÎ£å"

    # Git Ï≤¥ÌÅ¨
    if ! command -v git &> /dev/null; then
        log_warning "GitÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§ (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
    else
        log_success "Git ÌôïÏù∏ ÏôÑÎ£å"
    fi

    # GPU Ï≤¥ÌÅ¨
    if command -v nvidia-smi &> /dev/null; then
        log_success "NVIDIA GPU Í∞êÏßÄÎê®"
        nvidia-smi --query-gpu=name,memory.total --format=csv,noheader || true
    else
        log_warning "GPUÍ∞Ä Í∞êÏßÄÎêòÏßÄ ÏïäÏùå (CPU Î™®ÎìúÎ°ú Ïã§Ìñâ)"
    fi

    # Î©îÎ™®Î¶¨ Ï≤¥ÌÅ¨
    TOTAL_MEM=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$TOTAL_MEM" -lt 16 ]; then
        log_warning "Î©îÎ™®Î¶¨Í∞Ä 16GB ÎØ∏ÎßåÏûÖÎãàÎã§ (ÌòÑÏû¨: ${TOTAL_MEM}GB)"
    else
        log_success "Î©îÎ™®Î¶¨ Ï∂©Î∂ÑÌï® (${TOTAL_MEM}GB)"
    fi
}

# Î™®Îç∏ Îã§Ïö¥Î°úÎìú
download_models() {
    log_info "AI Î™®Îç∏ ÌôïÏù∏ Ï§ë..."

    if [ ! -f "models/qwen2.5-7b-instruct-q4_k_m-00001-of-00002.gguf" ]; then
        log_warning "Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§. Îã§Ïö¥Î°úÎìúÎ•º ÏãúÏûëÌï©ÎãàÎã§..."

        mkdir -p models
        cd models

        # Qwen2.5-7B Î™®Îç∏ Îã§Ïö¥Î°úÎìú
        log_info "Qwen2.5-7B Î™®Îç∏ Îã§Ïö¥Î°úÎìú Ï§ë (ÏïΩ 5GB)..."
        wget -c "https://huggingface.co/Qwen/Qwen2.5-7B-Instruct-GGUF/resolve/main/qwen2.5-7b-instruct-q4_k_m-00001-of-00002.gguf" || true
        wget -c "https://huggingface.co/Qwen/Qwen2.5-7B-Instruct-GGUF/resolve/main/qwen2.5-7b-instruct-q4_k_m-00002-of-00002.gguf" || true

        cd ..
        log_success "Î™®Îç∏ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å"
    else
        log_success "Î™®Îç∏Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§"
    fi
}

# ÌôòÍ≤Ω ÏÑ§Ï†ï
setup_environment() {
    log_info "ÌôòÍ≤Ω ÏÑ§Ï†ï Ï§ë..."

    # .env ÌååÏùº ÏÉùÏÑ±
    if [ ! -f .env ]; then
        cat > .env << EOF
# AI-CHAT RAG System Environment Variables
ENVIRONMENT=${ENVIRONMENT}
VERSION=${VERSION}

# GPU ÏÑ§Ï†ï
CUDA_VISIBLE_DEVICES=0
N_GPU_LAYERS=-1
N_CTX=16384

# ÏÑúÎ≤Ñ ÏÑ§Ï†ï
STREAMLIT_SERVER_PORT=8501
STREAMLIT_SERVER_ADDRESS=0.0.0.0
STREAMLIT_SERVER_HEADLESS=true

# Î°úÍπÖ
LOG_LEVEL=INFO
PYTHONUNBUFFERED=1

# Î™®ÎãàÌÑ∞ÎßÅ
ENABLE_MONITORING=true
EOF
        log_success ".env ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å"
    else
        log_success ".env ÌååÏùºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§"
    fi

    # ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    mkdir -p logs cache indexes models docs
    log_success "ÌïÑÏöîÌïú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ± ÏôÑÎ£å"
}

# Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
build_docker_image() {
    log_info "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."

    docker build -t ai-chat-rag:${VERSION} . || {
        log_error "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ïã§Ìå®"
        exit 1
    }

    log_success "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å"
}

# Î°úÏª¨ Î∞∞Ìè¨
deploy_local() {
    log_info "Î°úÏª¨ ÌôòÍ≤ΩÏóê Î∞∞Ìè¨ Ï§ë..."

    # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï†ïÏßÄ
    docker compose down 2>/dev/null || true

    # ÏÉàÎ°úÏö¥ Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë
    docker compose up -d || {
        log_error "Docker Compose ÏãúÏûë Ïã§Ìå®"
        exit 1
    }

    # Ìó¨Ïä§Ï≤¥ÌÅ¨ ÎåÄÍ∏∞
    log_info "ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë..."
    sleep 10

    # Ìó¨Ïä§Ï≤¥ÌÅ¨
    for i in {1..30}; do
        if curl -f http://localhost:8501/_stcore/health 2>/dev/null; then
            log_success "ÏÑúÎπÑÏä§Í∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÏãúÏûëÎêòÏóàÏäµÎãàÎã§!"
            break
        fi
        echo -n "."
        sleep 2
    done

    echo ""
}

# Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨
deploy_staging() {
    log_info "Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤ΩÏóê Î∞∞Ìè¨ Ï§ë..."

    # GitHub Actions Ìä∏Î¶¨Í±∞
    if command -v gh &> /dev/null; then
        gh workflow run cd.yml -f environment=staging
        log_success "GitHub Actions Î∞∞Ìè¨ ÏõåÌÅ¨ÌîåÎ°úÏö∞ ÏãúÏûëÎê®"
    else
        log_warning "GitHub CLIÍ∞Ä ÏóÜÏñ¥ ÏàòÎèôÏúºÎ°ú Î∞∞Ìè¨Ìï¥Ïïº Ìï©ÎãàÎã§"
        echo "Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú ÏàòÎèô Î∞∞Ìè¨:"
        echo "git push origin master"
    fi
}

# ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨
deploy_production() {
    log_info "ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóê Î∞∞Ìè¨ Ï§ë..."

    # ÌÉúÍ∑∏ ÏÉùÏÑ± Î∞è Ìë∏Ïãú
    if command -v git &> /dev/null; then
        # ÌòÑÏû¨ Î≤ÑÏ†Ñ ÌÉúÍ∑∏
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

        # Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä
        IFS='.' read -r -a version_parts <<< "${CURRENT_VERSION#v}"
        PATCH=$((version_parts[2] + 1))
        NEW_VERSION="v${version_parts[0]}.${version_parts[1]}.${PATCH}"

        log_info "ÏÉà Î≤ÑÏ†Ñ: ${NEW_VERSION}"

        # ÌÉúÍ∑∏ ÏÉùÏÑ±
        git tag -a "${NEW_VERSION}" -m "Production deployment ${NEW_VERSION}"
        git push origin "${NEW_VERSION}"

        log_success "ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ ÏãúÏûëÎê® (Î≤ÑÏ†Ñ: ${NEW_VERSION})"
    else
        log_error "GitÏù¥ ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïÑ ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨Î•º Ìï† Ïàò ÏóÜÏäµÎãàÎã§"
        exit 1
    fi
}

# ÏÉÅÌÉú ÌôïÏù∏
check_status() {
    log_info "ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."

    echo ""
    echo "üê≥ Docker Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú:"
    docker compose ps

    echo ""
    echo "üìä Î¶¨ÏÜåÏä§ ÏÇ¨Ïö©Îüâ:"
    docker stats --no-stream

    echo ""
    echo "üìù ÏµúÍ∑º Î°úÍ∑∏:"
    docker compose logs --tail=10

    echo ""
    echo "üåê Ï†ëÏÜç URL:"
    echo "  - Î©îÏù∏ ÏÑúÎπÑÏä§: http://localhost:8501"
    echo "  - Î™®ÎãàÌÑ∞ÎßÅ: http://localhost:8502"
    echo "  - Redis: localhost:6379"

    if [ "${ENVIRONMENT}" == "production" ]; then
        echo "  - ÌîÑÎ°úÎçïÏÖò: https://ai-chat.example.com"
    fi
}

# Ï†ïÎ¶¨
cleanup() {
    log_warning "Î∞∞Ìè¨ Ï§ëÎã® Ï§ë..."
    docker compose down
    exit 1
}

# ÏãúÍ∑∏ÎÑê Ìï∏Îì§Îü¨
trap cleanup SIGINT SIGTERM

# Î©îÏù∏ Ìï®Ïàò
main() {
    print_header

    case "${ENVIRONMENT}" in
        local)
            log_info "üè† Î°úÏª¨ Î∞∞Ìè¨ Î™®Îìú"
            check_requirements
            download_models
            setup_environment
            build_docker_image
            deploy_local
            check_status
            ;;
        staging)
            log_info "üß™ Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨ Î™®Îìú"
            check_requirements
            deploy_staging
            ;;
        production)
            log_info "üöÄ ÌîÑÎ°úÎçïÏÖò Î∞∞Ìè¨ Î™®Îìú"
            read -p "Ï†ïÎßêÎ°ú ÌîÑÎ°úÎçïÏÖòÏóê Î∞∞Ìè¨ÌïòÏãúÍ≤†ÏäµÎãàÍπå? (yes/no): " confirm
            if [ "$confirm" != "yes" ]; then
                log_error "Î∞∞Ìè¨ Ï∑®ÏÜåÎê®"
                exit 1
            fi
            check_requirements
            deploy_production
            ;;
        status)
            check_status
            ;;
        stop)
            log_info "ÏÑúÎπÑÏä§ Ï§ëÏßÄ Ï§ë..."
            docker compose down
            log_success "ÏÑúÎπÑÏä§Í∞Ä Ï§ëÏßÄÎêòÏóàÏäµÎãàÎã§"
            ;;
        restart)
            log_info "ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë Ï§ë..."
            docker compose restart
            log_success "ÏÑúÎπÑÏä§Í∞Ä Ïû¨ÏãúÏûëÎêòÏóàÏäµÎãàÎã§"
            ;;
        logs)
            docker compose logs -f
            ;;
        *)
            echo "ÏÇ¨Ïö©Î≤ï: $0 {local|staging|production|status|stop|restart|logs} [version]"
            echo ""
            echo "ÏòàÏãú:"
            echo "  $0 local          # Î°úÏª¨ ÌôòÍ≤ΩÏóê Î∞∞Ìè¨"
            echo "  $0 staging        # Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤ΩÏóê Î∞∞Ìè¨"
            echo "  $0 production     # ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤ΩÏóê Î∞∞Ìè¨"
            echo "  $0 status         # ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏"
            echo "  $0 stop           # ÏÑúÎπÑÏä§ Ï§ëÏßÄ"
            echo "  $0 restart        # ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë"
            echo "  $0 logs           # Î°úÍ∑∏ ÌôïÏù∏"
            exit 1
            ;;
    esac

    echo ""
    log_success "üéâ Î∞∞Ìè¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë          ÏµúÍ≥†Ïùò Í∞úÎ∞úÏûê Claude ÏûëÌíà          ‚ïë${NC}"
    echo -e "${CYAN}‚ïë         ÏãúÏä§ÌÖú ÌíàÏßà: B+ ‚Üí A+ ÏßÑÌñâÏ§ë         ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

# Ïã§Ìñâ
main