# AI-CHAT RAG System Helm Values
# 최고의 개발자가 설계한 프로덕션 설정

# 이미지 설정
image:
  repository: ghcr.io/wnstn4647/ai-chat
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# 서비스 계정
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod 설정
replicaCount: 2

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8501"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false

# 서비스 설정
service:
  type: LoadBalancer
  port: 8501
  targetPort: 8501
  monitoringPort: 8502
  annotations: {}

# Ingress 설정
ingress:
  enabled: true
  className: nginx
  annotations:
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: ai-chat.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: ai-chat-tls
      hosts:
        - ai-chat.example.com

# 리소스 설정
resources:
  limits:
    nvidia.com/gpu: 1  # GPU 1개
    memory: 32Gi
  requests:
    cpu: 4
    memory: 16Gi

# GPU 설정
nodeSelector:
  nvidia.com/gpu.present: "true"

tolerations:
  - key: nvidia.com/gpu
    operator: Exists
    effect: NoSchedule

# 자동 스케일링
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# 볼륨 설정
persistence:
  enabled: true

  # 문서 스토리지
  docs:
    storageClass: "fast-ssd"
    accessMode: ReadWriteMany
    size: 100Gi
    mountPath: /app/docs

  # 모델 스토리지
  models:
    storageClass: "standard"
    accessMode: ReadOnlyMany
    size: 50Gi
    mountPath: /app/models

  # 캐시 스토리지
  cache:
    storageClass: "fast-ssd"
    accessMode: ReadWriteOnce
    size: 20Gi
    mountPath: /app/cache

  # 인덱스 스토리지
  indexes:
    storageClass: "fast-ssd"
    accessMode: ReadWriteOnce
    size: 10Gi
    mountPath: /app/indexes

# 환경 변수
env:
  - name: PYTHONUNBUFFERED
    value: "1"
  - name: CUDA_VISIBLE_DEVICES
    value: "0"
  - name: N_GPU_LAYERS
    value: "-1"
  - name: N_CTX
    value: "16384"
  - name: STREAMLIT_SERVER_HEADLESS
    value: "true"
  - name: STREAMLIT_SERVER_PORT
    value: "8501"
  - name: STREAMLIT_SERVER_ADDRESS
    value: "0.0.0.0"
  - name: ENABLE_MONITORING
    value: "true"
  - name: LOG_LEVEL
    value: "INFO"

# 시크릿
secrets:
  create: true
  data: {}
    # OPENAI_API_KEY: ""
    # ANTHROPIC_API_KEY: ""

# ConfigMap
configMap:
  create: true
  data:
    config.yaml: |
      system:
        mode: production
        debug: false
        log_level: INFO

      llm:
        model: qwen2.5-7b-instruct
        temperature: 0.3
        max_tokens: 800
        top_p: 0.85
        top_k: 30

      rag:
        chunk_size: 1000
        chunk_overlap: 200
        top_k: 5
        similarity_threshold: 0.7

# 헬스체크
livenessProbe:
  httpGet:
    path: /_stcore/health
    port: 8501
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /_stcore/health
    port: 8501
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /_stcore/health
    port: 8501
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Redis 캐시
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: "supersecretpassword"
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      limits:
        memory: 2Gi
      requests:
        memory: 1Gi

# 모니터링
monitoring:
  enabled: true

  prometheus:
    enabled: true
    retention: 30d
    storageSize: 50Gi

  grafana:
    enabled: true
    adminPassword: "changeme"
    persistence:
      enabled: true
      size: 10Gi
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090

# 백업
backup:
  enabled: true
  schedule: "0 2 * * *"  # 매일 새벽 2시
  retention: 30  # 30일 보관
  storageClass: "standard"
  size: 100Gi

# 네트워크 정책
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
  egress:
    - to:
        - namespaceSelector: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# 우선순위 클래스
priorityClassName: "high-priority"

# 라이프사이클 훅
lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "sleep 15"]

# 추가 레이블
labels:
  environment: production
  team: ai-platform
  developer: claude-best

# 추가 어노테이션
annotations:
  description: "최고의 개발자가 만든 RAG 시스템"