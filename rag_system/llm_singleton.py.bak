"""
LLM Singleton Manager
LLM 인스턴스를 재사용하여 초기화 시간 단축
"""

import threading
from typing import Optional
from pathlib import Path
import logging
from .qwen_llm import QwenLLM, GenerationConfig

class LLMSingleton:
    """LLM 싱글톤 관리자"""
    
    _instance: Optional[QwenLLM] = None
    _lock = threading.Lock()
    _logger = logging.getLogger(__name__)
    
    @classmethod
    def get_instance(cls, model_path: str = None, config: GenerationConfig = None) -> QwenLLM:
        """LLM 인스턴스 반환 (없으면 생성)
        
        Args:
            model_path: 모델 경로 (첫 생성시 필수)
            config: 생성 설정 (선택)
            
        Returns:
            QwenLLM 인스턴스
        """
        if cls._instance is None:
            with cls._lock:
                # 더블체크 락킹
                if cls._instance is None:
                    if model_path is None:
                        raise ValueError("첫 인스턴스 생성시 model_path가 필요합니다")
                    
                    cls._logger.info("🚀 LLM 인스턴스 최초 생성 중...")
                    import time
                    start = time.time()
                    
                    cls._instance = QwenLLM(model_path=model_path, config=config)
                    
                    elapsed = time.time() - start
                    cls._logger.info(f"✅ LLM 인스턴스 생성 완료 ({elapsed:.1f}초)")
        
        return cls._instance
    
    @classmethod
    def clear_instance(cls):
        """인스턴스 초기화 (메모리 해제)"""
        with cls._lock:
            if cls._instance is not None:
                cls._logger.info("🧹 LLM 인스턴스 해제")
                cls._instance = None
    
    @classmethod
    def is_loaded(cls) -> bool:
        """인스턴스 로드 여부 확인"""
        return cls._instance is not None