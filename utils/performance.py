"""
ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Ïú†Ìã∏Î¶¨Ìã∞
Ìï®Ïàò Ïã§Ìñâ ÏãúÍ∞Ñ Ï∏°Ï†ï Î∞è Î©îÌä∏Î¶≠ ÏàòÏßë
"""

import time
import streamlit as st
from functools import wraps
from typing import Dict, Any, Optional
import logging


class PerformanceMonitor:
    """ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÌÅ¥ÎûòÏä§"""

    # Î°úÍ±∞ ÏÑ§Ï†ï
    logger = logging.getLogger(__name__)

    # ÏÑ±Îä• ÏûÑÍ≥ÑÍ∞í (Ï¥à)
    SLOW_THRESHOLD = 1.0
    CRITICAL_THRESHOLD = 5.0

    @classmethod
    def measure(cls, func=None, *, name: str = None, show_time: bool = True):
        """
        Ìï®Ïàò Ïã§Ìñâ ÏãúÍ∞Ñ Ï∏°Ï†ï Îç∞ÏΩîÎ†àÏù¥ÌÑ∞

        Usage:
            @PerformanceMonitor.measure
            def slow_function():
                time.sleep(2)

            @PerformanceMonitor.measure(name="Custom Name", show_time=False)
            def another_function():
                pass
        """
        def decorator(f):
            @wraps(f)
            def wrapper(*args, **kwargs):
                func_name = name or f.__name__

                # ÏãúÏûë ÏãúÍ∞Ñ
                start_time = time.time()

                try:
                    # Ìï®Ïàò Ïã§Ìñâ
                    result = f(*args, **kwargs)

                    # Ïã§Ìñâ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
                    duration = time.time() - start_time

                    # Î©îÌä∏Î¶≠ Ï†ÄÏû•
                    cls._store_metric(func_name, duration)

                    # ÏãúÍ∞Ñ ÌëúÏãú (ÏòµÏÖò)
                    if show_time:
                        cls._display_timing(func_name, duration)

                    # Î°úÍπÖ
                    if duration > cls.CRITICAL_THRESHOLD:
                        cls.logger.warning(f"Critical: {func_name} took {duration:.2f}s")
                    elif duration > cls.SLOW_THRESHOLD:
                        cls.logger.info(f"Slow: {func_name} took {duration:.2f}s")

                    return result

                except Exception as e:
                    # ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ ÏãúÍ∞Ñ Ï∏°Ï†ï
                    duration = time.time() - start_time
                    cls._store_metric(func_name, duration, error=True)
                    cls.logger.error(f"{func_name} failed after {duration:.2f}s: {e}")
                    raise

            return wrapper

        # Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Í∞Ä Ïù∏Ïûê ÏóÜÏù¥ ÏÇ¨Ïö©Îêú Í≤ΩÏö∞
        if func is not None:
            return decorator(func)

        # Îç∞ÏΩîÎ†àÏù¥ÌÑ∞Í∞Ä Ïù∏ÏûêÏôÄ Ìï®Íªò ÏÇ¨Ïö©Îêú Í≤ΩÏö∞
        return decorator

    @classmethod
    def _store_metric(cls, func_name: str, duration: float, error: bool = False):
        """Î©îÌä∏Î¶≠ Ï†ÄÏû•"""
        if 'performance_metrics' not in st.session_state:
            st.session_state.performance_metrics = {}

        if func_name not in st.session_state.performance_metrics:
            st.session_state.performance_metrics[func_name] = {
                'count': 0,
                'total_time': 0.0,
                'min_time': float('inf'),
                'max_time': 0.0,
                'errors': 0
            }

        metrics = st.session_state.performance_metrics[func_name]
        metrics['count'] += 1
        metrics['total_time'] += duration
        metrics['min_time'] = min(metrics['min_time'], duration)
        metrics['max_time'] = max(metrics['max_time'], duration)
        if error:
            metrics['errors'] += 1

    @classmethod
    def _display_timing(cls, func_name: str, duration: float):
        """Ïã§Ìñâ ÏãúÍ∞Ñ ÌëúÏãú"""
        if cls._is_debug_mode():
            if duration > cls.CRITICAL_THRESHOLD:
                st.error(f"‚è±Ô∏è {func_name}: {duration:.2f}s (Îß§Ïö∞ ÎäêÎ¶º!)")
            elif duration > cls.SLOW_THRESHOLD:
                st.warning(f"‚è±Ô∏è {func_name}: {duration:.2f}s (ÎäêÎ¶º)")
            else:
                st.caption(f"‚è±Ô∏è {func_name}: {duration:.3f}s")

    @classmethod
    def get_metrics(cls) -> Dict[str, Any]:
        """ÏàòÏßëÎêú Î©îÌä∏Î¶≠ Î∞òÌôò"""
        return st.session_state.get('performance_metrics', {})

    @classmethod
    def get_summary(cls) -> Dict[str, Any]:
        """Î©îÌä∏Î¶≠ ÏöîÏïΩ Ï†ïÎ≥¥"""
        metrics = cls.get_metrics()
        if not metrics:
            return {}

        summary = {
            'total_functions': len(metrics),
            'total_calls': sum(m['count'] for m in metrics.values()),
            'total_time': sum(m['total_time'] for m in metrics.values()),
            'total_errors': sum(m['errors'] for m in metrics.values()),
            'slowest_function': None,
            'fastest_function': None,
            'most_called': None
        }

        # Í∞ÄÏû• ÎäêÎ¶∞ Ìï®Ïàò
        slowest = max(metrics.items(), key=lambda x: x[1]['max_time'])
        summary['slowest_function'] = {
            'name': slowest[0],
            'time': slowest[1]['max_time']
        }

        # Í∞ÄÏû• Îπ†Î•∏ Ìï®Ïàò
        fastest = min(metrics.items(), key=lambda x: x[1]['min_time'])
        summary['fastest_function'] = {
            'name': fastest[0],
            'time': fastest[1]['min_time']
        }

        # Í∞ÄÏû• ÎßéÏù¥ Ìò∏Ï∂úÎêú Ìï®Ïàò
        most_called = max(metrics.items(), key=lambda x: x[1]['count'])
        summary['most_called'] = {
            'name': most_called[0],
            'count': most_called[1]['count']
        }

        return summary

    @classmethod
    def display_report(cls):
        """ÏÑ±Îä• Î≥¥Í≥†ÏÑú ÌëúÏãú"""
        summary = cls.get_summary()
        if not summary:
            st.info("ÏïÑÏßÅ ÏàòÏßëÎêú ÏÑ±Îä• Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§")
            return

        st.markdown("### üìä ÏÑ±Îä• Î≥¥Í≥†ÏÑú")

        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("Ï¥ù Ìï®Ïàò", summary['total_functions'])

        with col2:
            st.metric("Ï¥ù Ìò∏Ï∂ú", summary['total_calls'])

        with col3:
            st.metric("Ï¥ù ÏãúÍ∞Ñ", f"{summary['total_time']:.2f}s")

        with col4:
            st.metric("ÏóêÎü¨", summary['total_errors'])

        # ÏÉÅÏÑ∏ Ï†ïÎ≥¥
        with st.expander("üìà ÏÉÅÏÑ∏ Î©îÌä∏Î¶≠"):
            metrics = cls.get_metrics()
            for func_name, data in metrics.items():
                avg_time = data['total_time'] / data['count'] if data['count'] > 0 else 0
                st.text(f"""
                Ìï®Ïàò: {func_name}
                  - Ìò∏Ï∂ú ÌöüÏàò: {data['count']}
                  - ÌèâÍ∑† ÏãúÍ∞Ñ: {avg_time:.3f}s
                  - ÏµúÏÜå ÏãúÍ∞Ñ: {data['min_time']:.3f}s
                  - ÏµúÎåÄ ÏãúÍ∞Ñ: {data['max_time']:.3f}s
                  - ÏóêÎü¨ ÌöüÏàò: {data['errors']}
                """)

    @classmethod
    def reset_metrics(cls):
        """Î©îÌä∏Î¶≠ Ï¥àÍ∏∞Ìôî"""
        if 'performance_metrics' in st.session_state:
            del st.session_state.performance_metrics
        st.success("ÏÑ±Îä• Î©îÌä∏Î¶≠Ïù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§")

    @classmethod
    def _is_debug_mode(cls) -> bool:
        """ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôïÏù∏"""
        import os
        return os.getenv('DEBUG_MODE', '').lower() in ['true', '1', 'yes']


# Ïª®ÌÖçÏä§Ìä∏ Îß§ÎãàÏ†ÄÎ°ú ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî ÌÉÄÏù¥Î®∏
class Timer:
    """
    Ïª®ÌÖçÏä§Ìä∏ Îß§ÎãàÏ†Ä ÌÉÄÏù¥Î®∏

    Usage:
        with Timer("Îç∞Ïù¥ÌÑ∞ Î°úÎìú"):
            # ÏãúÍ∞ÑÏùÑ Ï∏°Ï†ïÌï† ÏΩîÎìú
            load_data()
    """

    def __init__(self, name: str = "Operation", show: bool = True):
        self.name = name
        self.show = show
        self.start_time = None
        self.duration = None

    def __enter__(self):
        self.start_time = time.time()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.duration = time.time() - self.start_time
        if self.show:
            if self.duration > PerformanceMonitor.SLOW_THRESHOLD:
                st.warning(f"‚è±Ô∏è {self.name}: {self.duration:.2f}s")
            else:
                st.caption(f"‚è±Ô∏è {self.name}: {self.duration:.3f}s")